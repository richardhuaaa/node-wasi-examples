// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code, clippy::all)]
    pub mod exports {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::__link_custom_section_describing_imports;
        use super::super::_rt;

        #[derive(Debug)]
        #[repr(transparent)]
        pub struct Client {
            handle: _rt::Resource<Client>,
        }

        type _ClientRep<T> = Option<T>;

        impl Client {
            /// Creates a new resource from the specified representation.
            ///
            /// This function will create a new resource handle by moving `val` onto
            /// the heap and then passing that heap pointer to the component model to
            /// create a handle. The owned handle is then returned as `Client`.
            pub fn new<T: GuestClient>(val: T) -> Self {
                Self::type_guard::<T>();
                let val: _ClientRep<T> = Some(val);
                let ptr: *mut _ClientRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
            }

            /// Gets access to the underlying `T` which represents this resource.
            pub fn get<T: GuestClient>(&self) -> &T {
                let ptr = unsafe { &*self.as_ptr::<T>() };
                ptr.as_ref().unwrap()
            }

            /// Gets mutable access to the underlying `T` which represents this
            /// resource.
            pub fn get_mut<T: GuestClient>(&mut self) -> &mut T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.as_mut().unwrap()
            }

            /// Consumes this resource and returns the underlying `T`.
            pub fn into_inner<T: GuestClient>(self) -> T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.take().unwrap()
            }

            #[doc(hidden)]
            pub unsafe fn from_handle(handle: u32) -> Self {
                Self {
                    handle: _rt::Resource::from_handle(handle),
                }
            }

            #[doc(hidden)]
            pub fn take_handle(&self) -> u32 {
                _rt::Resource::take_handle(&self.handle)
            }

            #[doc(hidden)]
            pub fn handle(&self) -> u32 {
                _rt::Resource::handle(&self.handle)
            }

            // It's theoretically possible to implement the `GuestClient` trait twice
            // so guard against using it with two different types here.
            #[doc(hidden)]
            fn type_guard<T: 'static>() {
                use core::any::TypeId;
                static mut LAST_TYPE: Option<TypeId> = None;
                unsafe {
                    assert!(!cfg!(target_feature = "threads"));
                    let id = TypeId::of::<T>();
                    match LAST_TYPE {
                        Some(ty) => {
                            assert!(ty == id, "cannot use two types with this resource type")
                        }
                        None => LAST_TYPE = Some(id),
                    }
                }
            }

            #[doc(hidden)]
            pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                Self::type_guard::<T>();
                let _ = _rt::Box::from_raw(handle as *mut _ClientRep<T>);
            }

            fn as_ptr<T: GuestClient>(&self) -> *mut _ClientRep<T> {
                Client::type_guard::<T>();
                T::_resource_rep(self.handle()).cast()
            }
        }

        /// A borrowed version of [`Client`] which represents a borrowed value
        /// with the lifetime `'a`.
        #[derive(Debug)]
        #[repr(transparent)]
        pub struct ClientBorrow<'a> {
            rep: *mut u8,
            _marker: core::marker::PhantomData<&'a Client>,
        }

        impl<'a> ClientBorrow<'a> {
            #[doc(hidden)]
            pub unsafe fn lift(rep: usize) -> Self {
                Self {
                    rep: rep as *mut u8,
                    _marker: core::marker::PhantomData,
                }
            }

            /// Gets access to the underlying `T` in this resource.
            pub fn get<T: GuestClient>(&self) -> &T {
                let ptr = unsafe { &mut *self.as_ptr::<T>() };
                ptr.as_ref().unwrap()
            }

            // NB: mutable access is not allowed due to the component model allowing
            // multiple borrows of the same resource.

            fn as_ptr<T: 'static>(&self) -> *mut _ClientRep<T> {
                Client::type_guard::<T>();
                self.rep.cast()
            }
        }

        unsafe impl _rt::WasmResource for Client {
            #[inline]
            unsafe fn drop(_handle: u32) {
                #[cfg(not(target_arch = "wasm32"))]
                unreachable!();

                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]exports")]
                    extern "C" {
                        #[link_name = "[resource-drop]client"]
                        fn drop(_: u32);
                    }

                    drop(_handle);
                }
            }
        }

        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_method_client_add_cabi<T: GuestClient>(
            arg0: *mut u8,
            arg1: i32,
            arg2: i32,
        ) -> i32 {
            #[cfg(target_arch = "wasm32")]
            _rt::run_ctors_once();
            let result0 = T::add(
                ClientBorrow::lift(arg0 as u32 as usize).get(),
                arg1 as u32,
                arg2 as u32,
            );
            _rt::as_i32(result0)
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_method_client_hello_cabi<T: GuestClient>(arg0: *mut u8) {
            #[cfg(target_arch = "wasm32")]
            _rt::run_ctors_once();
            T::hello(ClientBorrow::lift(arg0 as u32 as usize).get());
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_method_client_return_string_cabi<T: GuestClient>(
            arg0: *mut u8,
        ) -> *mut u8 {
            #[cfg(target_arch = "wasm32")]
            _rt::run_ctors_once();
            let result0 = T::return_string(ClientBorrow::lift(arg0 as u32 as usize).get());
            let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
            let vec2 = (result0.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(4).cast::<usize>() = len2;
            *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
            ptr1
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_method_client_return_string<T: GuestClient>(arg0: *mut u8) {
            let l0 = *arg0.add(0).cast::<*mut u8>();
            let l1 = *arg0.add(4).cast::<usize>();
            _rt::cabi_dealloc(l0, l1, 1);
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_method_client_input_string_cabi<T: GuestClient>(
            arg0: *mut u8,
            arg1: *mut u8,
            arg2: usize,
        ) {
            #[cfg(target_arch = "wasm32")]
            _rt::run_ctors_once();
            let len0 = arg2;
            let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
            T::input_string(
                ClientBorrow::lift(arg0 as u32 as usize).get(),
                _rt::string_lift(bytes0),
            );
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_hello_world_cabi<T: Guest>() -> *mut u8 {
            #[cfg(target_arch = "wasm32")]
            _rt::run_ctors_once();
            let result0 = T::hello_world();
            let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
            let vec2 = (result0.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(4).cast::<usize>() = len2;
            *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
            ptr1
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn __post_return_hello_world<T: Guest>(arg0: *mut u8) {
            let l0 = *arg0.add(0).cast::<*mut u8>();
            let l1 = *arg0.add(4).cast::<usize>();
            _rt::cabi_dealloc(l0, l1, 1);
        }
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_get_client_cabi<T: Guest>() -> i32 {
            #[cfg(target_arch = "wasm32")]
            _rt::run_ctors_once();
            let result0 = T::get_client();
            (result0).take_handle() as i32
        }
        pub trait Guest {
            type Client: GuestClient;
            fn hello_world() -> _rt::String;
            fn get_client() -> Client;
        }
        pub trait GuestClient: 'static {
            #[doc(hidden)]
            unsafe fn _resource_new(val: *mut u8) -> u32
            where
                Self: Sized,
            {
                #[cfg(not(target_arch = "wasm32"))]
                {
                    let _ = val;
                    unreachable!();
                }

                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]exports")]
                    extern "C" {
                        #[link_name = "[resource-new]client"]
                        fn new(_: *mut u8) -> u32;
                    }
                    new(val)
                }
            }

            #[doc(hidden)]
            fn _resource_rep(handle: u32) -> *mut u8
            where
                Self: Sized,
            {
                #[cfg(not(target_arch = "wasm32"))]
                {
                    let _ = handle;
                    unreachable!();
                }

                #[cfg(target_arch = "wasm32")]
                {
                    #[link(wasm_import_module = "[export]exports")]
                    extern "C" {
                        #[link_name = "[resource-rep]client"]
                        fn rep(_: u32) -> *mut u8;
                    }
                    unsafe { rep(handle) }
                }
            }

            fn add(&self, a: u32, b: u32) -> u32;
            fn hello(&self);
            fn return_string(&self) -> _rt::String;
            fn input_string(&self, input: _rt::String);
        }
        #[doc(hidden)]

        macro_rules! __export_exports_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "exports#[method]client.add"]
    unsafe extern "C" fn export_method_client_add(arg0: *mut u8,arg1: i32,arg2: i32,) -> i32 {
      $($path_to_types)*::_export_method_client_add_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0, arg1, arg2)
    }
    #[export_name = "exports#[method]client.hello"]
    unsafe extern "C" fn export_method_client_hello(arg0: *mut u8,) {
      $($path_to_types)*::_export_method_client_hello_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0)
    }
    #[export_name = "exports#[method]client.return-string"]
    unsafe extern "C" fn export_method_client_return_string(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_client_return_string_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0)
    }
    #[export_name = "cabi_post_exports#[method]client.return-string"]
    unsafe extern "C" fn _post_return_method_client_return_string(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_client_return_string::<<$ty as $($path_to_types)*::Guest>::Client>(arg0)
    }
    #[export_name = "exports#[method]client.input-string"]
    unsafe extern "C" fn export_method_client_input_string(arg0: *mut u8,arg1: *mut u8,arg2: usize,) {
      $($path_to_types)*::_export_method_client_input_string_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0, arg1, arg2)
    }
    #[export_name = "exports#hello-world"]
    unsafe extern "C" fn export_hello_world() -> *mut u8 {
      $($path_to_types)*::_export_hello_world_cabi::<$ty>()
    }
    #[export_name = "cabi_post_exports#hello-world"]
    unsafe extern "C" fn _post_return_hello_world(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_hello_world::<$ty>(arg0)
    }
    #[export_name = "exports#get-client"]
    unsafe extern "C" fn export_get_client() -> i32 {
      $($path_to_types)*::_export_get_client_cabi::<$ty>()
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "exports#[dtor]client"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Client::dtor::<
        <$ty as $($path_to_types)*::Guest>::Client
        >(rep)
      }
    };

  };);
}
        #[doc(hidden)]
        pub(crate) use __export_exports_cabi;
        #[repr(align(4))]
        struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_example_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::exports::__export_exports_cabi!($ty with_types_in $($path_to_types_root)*::exports::exports);
  )
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:example:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 408] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9a\x02\x01A\x02\x01\
A\x02\x01B\x0f\x04\0\x06client\x03\x01\x01h\0\x01@\x03\x04self\x01\x01ay\x01by\0\
y\x04\0\x12[method]client.add\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x14[metho\
d]client.hello\x01\x03\x01@\x01\x04self\x01\0s\x04\0\x1c[method]client.return-st\
ring\x01\x04\x01@\x02\x04self\x01\x05inputs\x01\0\x04\0\x1b[method]client.input-\
string\x01\x05\x01@\0\0s\x04\0\x0bhello-world\x01\x06\x01i\0\x01@\0\0\x07\x04\0\x0a\
get-client\x01\x08\x04\0\x07exports\x05\0\x04\x01\x1ccomponent:rust-wasi2/exampl\
e\x04\0\x0b\x0d\x01\0\x07example\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
